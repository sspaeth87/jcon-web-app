
package de.xdevsoftware.jconwebapp.ui.desktop;

import com.rapidclipse.framework.server.data.validator.EmailValidator;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationException;
import com.vaadin.flow.data.validator.StringLengthValidator;
import com.vaadin.flow.router.Route;

import de.xdevsoftware.jconwebapp.HasTitle;
import de.xdevsoftware.jconwebapp.dto.CustomerCreateDTO;
import de.xdevsoftware.jconwebapp.model.Customer;
import de.xdevsoftware.jconwebapp.repository.CustomerRepository;
import de.xdevsoftware.jconwebapp.ui.MainLayout;
import de.xdevsoftware.jconwebapp.util.ItemMapper;


@Route(value = "todos", layout = MainLayout.class)
public class CustomerCreateView extends VerticalLayout implements HasTitle
{
	private Customer customer = new Customer();

	public CustomerCreateView()
	{
		super();
		this.initUI();
	}
	
	@Override
	public String getTitle()
	{
		return "Add Customer";
	}
	
	/**
	 * Event handler delegate method for the {@link VerticalLayout}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void this_onAttach(final AttachEvent event)
	{
		this.binder.addValueChangeListener((listener) -> {
			if(listener.isFromClient() && this.binder.isValid())
			{
				this.button.setEnabled(true);
			}
		});
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		try
		{
			this.binder.writeBean(this.customer);
			
			final CustomerCreateDTO customerCreateDTO = ItemMapper.fromItem(this.customer, CustomerCreateDTO.class);
			final boolean           isSuccessful      = CustomerRepository.save(customerCreateDTO);

			if(isSuccessful)
			{
				this.customer = new Customer();
				this.binder.readBean(this.customer);
			}
			else
			{
				System.out.println("Something went wrong ...");
			}
		}
		catch(final ValidationException e)
		{
			e.printStackTrace();
		}
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.form         = new FormLayout();
		this.formItem     = new FormItem();
		this.lblFirstname = new Label();
		this.txtFirstname = new TextField();
		this.formItem2    = new FormItem();
		this.lblLastname  = new Label();
		this.txtLastname  = new TextField();
		this.formItem3    = new FormItem();
		this.lblEmail     = new Label();
		this.txtEmail     = new TextField();
		this.binder       = new Binder<>();
		this.button       = new Button();
		
		this.form
			.setResponsiveSteps(new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP));
		this.lblFirstname.setText("Firstname");
		this.txtFirstname.setTabIndex(1);
		this.lblLastname.setText("Lastname");
		this.txtLastname.setTabIndex(2);
		this.lblEmail.setText("E-Mail");
		this.txtEmail.setTabIndex(3);
		this.button.setEnabled(false);
		this.button.setText("Speichern");
		this.button.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
		
		this.binder.forField(this.txtFirstname).withNullRepresentation("")
			.withValidator(new StringLengthValidator("Name muss mind. 3 Zeichen lang sein.", 3, null))
			.bind(Customer::getFirstname, Customer::setFirstname);
		this.binder.forField(this.txtLastname).withNullRepresentation("")
			.withValidator(new StringLengthValidator("Name muss min. 3 Zeichen lang sein.", 3, null))
			.bind(Customer::getLastname, Customer::setLastname);
		this.binder.forField(this.txtEmail).withNullRepresentation("")
			.withValidator(new EmailValidator("Geben Sie ein g√ºltige E-Mail ein."))
			.bind(Customer::getEmail, Customer::setEmail);
		
		this.lblFirstname.setSizeUndefined();
		this.lblFirstname.getElement().setAttribute("slot", "label");
		this.txtFirstname.setWidthFull();
		this.txtFirstname.setHeight(null);
		this.formItem.add(this.lblFirstname, this.txtFirstname);
		this.lblLastname.setSizeUndefined();
		this.lblLastname.getElement().setAttribute("slot", "label");
		this.txtLastname.setWidthFull();
		this.txtLastname.setHeight(null);
		this.formItem2.add(this.lblLastname, this.txtLastname);
		this.lblEmail.setSizeUndefined();
		this.lblEmail.getElement().setAttribute("slot", "label");
		this.txtEmail.setWidthFull();
		this.txtEmail.setHeight(null);
		this.formItem3.add(this.lblEmail, this.txtEmail);
		this.form.add(this.formItem, this.formItem2, this.formItem3);
		this.form.setSizeUndefined();
		this.button.setSizeUndefined();
		this.add(this.form, this.button);
		this.setSizeFull();
		
		this.addAttachListener(this::this_onAttach);
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>

	// <generated-code name="variables">
	private FormLayout       form;
	private Button           button;
	private Binder<Customer> binder;
	private Label            lblFirstname, lblLastname, lblEmail;
	private TextField        txtFirstname, txtLastname, txtEmail;
	private FormItem         formItem, formItem2, formItem3;
	// </generated-code>
	
}
