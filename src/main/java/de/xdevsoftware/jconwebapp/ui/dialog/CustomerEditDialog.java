
package de.xdevsoftware.jconwebapp.ui.dialog;

import com.rapidclipse.framework.server.data.validator.EmailValidator;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationException;
import com.vaadin.flow.data.validator.StringLengthValidator;

import de.xdevsoftware.jconwebapp.dto.CustomerUpdateDTO;
import de.xdevsoftware.jconwebapp.model.Customer;
import de.xdevsoftware.jconwebapp.repository.CustomerRepository;
import de.xdevsoftware.jconwebapp.util.ItemMapper;


public class CustomerEditDialog extends Dialog
{
	private Runnable       onOk;
	private final Customer customer;

	public CustomerEditDialog(final Customer customer)
	{
		super();
		this.initUI();

		this.setModal(true);
		this.customer = customer;
		this.binder.readBean(customer);
	}

	public CustomerEditDialog onOkSubmit(final Runnable onOk)
	{
		this.onOk = onOk;
		return this;
	}

	/**
	 * Event handler delegate method for the {@link Dialog}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void this_onAttach(final AttachEvent event)
	{
		this.binder.addValueChangeListener((listener) -> {
			if(listener.isFromClient() && this.binder.isValid())
			{
				this.btnSave.setEnabled(true);
			}
			else
			{
				this.btnSave.setEnabled(false);
			}
		});
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #btnSave}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnSave_onClick(final ClickEvent<Button> event)
	{
		try
		{
			this.binder.writeBean(this.customer);
			
			final boolean isSuccessfull =
				CustomerRepository.update(ItemMapper.fromItem(this.customer, CustomerUpdateDTO.class));

			if(isSuccessfull)
			{
				this.onOk.run();
				this.close();
			}
			
		}
		catch(final ValidationException e)
		{
			e.printStackTrace();
		}
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #btnCancel}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnCancel_onClick(final ClickEvent<Button> event)
	{
		this.close();
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.verticalLayout   = new VerticalLayout();
		this.form             = new FormLayout();
		this.formItem         = new FormItem();
		this.lblFirstname     = new Label();
		this.txtFirstname     = new TextField();
		this.formItem2        = new FormItem();
		this.lblLastname      = new Label();
		this.txtLastname      = new TextField();
		this.formItem3        = new FormItem();
		this.lblEmail         = new Label();
		this.txtEmail         = new TextField();
		this.binder           = new Binder<>();
		this.horizontalLayout = new HorizontalLayout();
		this.btnSave          = new Button();
		this.btnCancel        = new Button();

		this.verticalLayout.setPadding(false);
		this.form
			.setResponsiveSteps(new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP));
		this.lblFirstname.setText("Firstname");
		this.txtFirstname.setTabIndex(1);
		this.lblLastname.setText("Lastname");
		this.txtLastname.setTabIndex(2);
		this.lblEmail.setText("E-Mail");
		this.txtEmail.setTabIndex(3);
		this.btnSave.setEnabled(false);
		this.btnSave.setText("Speichern");
		this.btnSave.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
		this.btnCancel.setText("Abbrechen");

		this.binder.forField(this.txtFirstname).asRequired().withNullRepresentation("")
			.withValidator(new StringLengthValidator("Name muss mind 3 Zeichen lang sein", 3, null))
			.bind(Customer::getFirstname, Customer::setFirstname);
		this.binder.forField(this.txtLastname).asRequired().withNullRepresentation("")
			.withValidator(new StringLengthValidator("Name muss mind 3 Zeichen lang sein", 3, null))
			.bind(Customer::getLastname, Customer::setLastname);
		this.binder.forField(this.txtEmail).asRequired().withNullRepresentation("")
			.withValidator(new EmailValidator("Bitte geben Sie eine g√ºltige E-Mail Adresse ein"))
			.bind(Customer::getEmail, Customer::setEmail);

		this.lblFirstname.setSizeUndefined();
		this.lblFirstname.getElement().setAttribute("slot", "label");
		this.txtFirstname.setWidthFull();
		this.txtFirstname.setHeight(null);
		this.formItem.add(this.lblFirstname, this.txtFirstname);
		this.lblLastname.setSizeUndefined();
		this.lblLastname.getElement().setAttribute("slot", "label");
		this.txtLastname.setWidthFull();
		this.txtLastname.setHeight(null);
		this.formItem2.add(this.lblLastname, this.txtLastname);
		this.lblEmail.setSizeUndefined();
		this.lblEmail.getElement().setAttribute("slot", "label");
		this.txtEmail.setWidthFull();
		this.txtEmail.setHeight(null);
		this.formItem3.add(this.lblEmail, this.txtEmail);
		this.form.add(this.formItem, this.formItem2, this.formItem3);
		this.btnSave.setSizeUndefined();
		this.btnCancel.setSizeUndefined();
		this.horizontalLayout.add(this.btnSave, this.btnCancel);
		this.form.setSizeUndefined();
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight(null);
		this.verticalLayout.add(this.form, this.horizontalLayout);
		this.verticalLayout.setWidthFull();
		this.verticalLayout.setHeight(null);
		this.add(this.verticalLayout);
		this.setWidth("500px");
		this.setHeight(null);

		this.addAttachListener(this::this_onAttach);
		this.btnSave.addClickListener(this::btnSave_onClick);
		this.btnCancel.addClickListener(this::btnCancel_onClick);
	} // </generated-code>

	// <generated-code name="variables">
	private FormLayout       form;
	private Button           btnSave, btnCancel;
	private VerticalLayout   verticalLayout;
	private Binder<Customer> binder;
	private HorizontalLayout horizontalLayout;
	private Label            lblFirstname, lblLastname, lblEmail;
	private TextField        txtFirstname, txtLastname, txtEmail;
	private FormItem         formItem, formItem2, formItem3;
	// </generated-code>
	
}
