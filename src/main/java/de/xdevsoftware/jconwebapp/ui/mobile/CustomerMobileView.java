
package de.xdevsoftware.jconwebapp.ui.mobile;

import java.util.Arrays;
import java.util.List;

import com.rapidclipse.framework.server.data.renderer.RenderedComponent;
import com.rapidclipse.framework.server.ui.filter.FilterComponent;
import com.rapidclipse.framework.server.ui.filter.GridFilterSubjectFactory;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.data.provider.DataProvider;
import com.vaadin.flow.router.Route;

import de.xdevsoftware.jconwebapp.HasTitle;
import de.xdevsoftware.jconwebapp.model.Customer;
import de.xdevsoftware.jconwebapp.renderer.MobileCustomerRenderer;
import de.xdevsoftware.jconwebapp.repository.CustomerRepository;
import de.xdevsoftware.jconwebapp.ui.MainLayout;


@Route(value = "customer-mobile", layout = MainLayout.class)
public class CustomerMobileView extends VerticalLayout implements HasTitle
{
	
	public CustomerMobileView()
	{
		super();
		this.initUI();
	}

	@Override
	public String getTitle()
	{
		return "Customer Mobile View";
	}
	
	/**
	 * Event handler delegate method for the {@link VerticalLayout}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void this_onAttach(final AttachEvent event)
	{
		this.loadData();
	}

	public void loadData()
	{
		final List<Customer> customers = CustomerRepository.findAll();
		this.grid.setDataProvider(DataProvider.ofCollection(customers));
		
		this.filterComponent.connectWith(this.grid.getDataProvider());
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.filterComponent = new FilterComponent();
		this.grid            = new Grid<>(Customer.class, false);

		this.grid.addColumn(RenderedComponent.Renderer(MobileCustomerRenderer::new)).setKey("renderer")
			.setHeader("Customer").setSortable(false);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);

		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.filterComponent.setFilterSubject(GridFilterSubjectFactory.CreateFilterSubject(this.grid,
			Arrays.asList("email", "firstname", "lastname"), Arrays.asList("email", "firstname", "lastname")));

		this.filterComponent.setWidthFull();
		this.filterComponent.setHeight(null);
		this.grid.setSizeFull();
		this.add(this.filterComponent, this.grid);
		this.setFlexGrow(1.0, this.grid);
		this.setSizeFull();

		this.addAttachListener(this::this_onAttach);
	} // </generated-code>

	// <generated-code name="variables">
	private Grid<Customer>  grid;
	private FilterComponent filterComponent;
	// </generated-code>
	
}
